import java.util.*;

/**
 * @author JJ
 * @date 2021/3/21 - 21:28
 */
public class NC93 {

    ArrayList<Integer> ans;
    LinkedHashMap<String, Integer> map = new LinkedHashMap<>();
    int count = 0;

//    public static void main(String[] args) {
//        NC93 nc93 = new NC93();
//        int[][] operators = {
//                {1, -324690837, -72487934}, {1, -723504364, -369145172}, {2, -324690837}, {1, 724101438, -30727452}, {1, 366967562, 290286156}, {2, 366967562}, {1, -21417066, -450706222}, {1, -484359960, -121414361}, {1, -629538923, -759874959}, {1, -461538894, 749719150}, {1, -338664886, -3080586}, {2, 522415046}, {1, 134352387, -391032350}, {1, 283492390, 210901529}, {2, -328994470}, {2, -254674447}, {2, 85161833}, {1, 36899859, -561167545}, {1, -232060336, 889831435}, {1, -848557701, -189598178}, {2, -81051921}, {1, 57162090, -193776405}, {1, 157908494, -941008658}, {2, -21417066}, {2, -485579587}, {2, 449908952}, {1, 12002448, -273547528}, {1, -267371849, 634867878}, {1, 128963067, 102756157}, {2, 36899859}, {2, 145140817}, {2, 335181121}, {1, 89294557, -213039610}, {2, 204879021}, {2, 36899859}, {2, -371773103}, {1, -354568989, -788098655}, {2, 283492390}, {2, 148848181}, {1, 641416456, -646693824}, {1, -970438681, 341383327}, {1, 452656493, -68334619}, {1, 209021588, 229415889}, {1, 580338695, -286744639}, {1, 263639066, -99669610}, {1, -586507345, 255143085}, {2, 89294557}, {2, 209021588}, {1, 888670782, -378802985}, {1, -751520980, 8161338}, {2, 12002448}, {1, -967501590, -351688503}, {2, 514432065}, {2, 80361112}, {1, 220830017, -93263524}, {2, 32131049}, {1, -264084048, -155050456}, {1, -482193643, -232757642}, {2, 134352387}, {1, -303458351, -974058471}, {2, 452656493}, {1, 505909889, -508809796}
//        };
//        nc93.LRU(operators, 3);
////        String s="[[1,-324690837,-72487934],[1,-723504364,-369145172],[2,-324690837],[1,724101438,-30727452],[1,366967562,290286156],[2,366967562],[1,-21417066,-450706222],[1,-484359960,-121414361],[1,-629538923,-759874959],[1,-461538894,749719150],[1,-338664886,-3080586],[2,522415046],[1,134352387,-391032350],[1,283492390,210901529],[2,-328994470],[2,-254674447],[2,85161833],[1,36899859,-561167545],[1,-232060336,889831435],[1,-848557701,-189598178],[2,-81051921],[1,57162090,-193776405],[1,157908494,-941008658],[2,-21417066],[2,-485579587],[2,449908952],[1,12002448,-273547528],[1,-267371849,634867878],[1,128963067,102756157],[2,36899859],[2,145140817],[2,335181121],[1,89294557,-213039610],[2,204879021],[2,36899859],[2,-371773103],[1,-354568989,-788098655],[2,283492390],[2,148848181],[1,641416456,-646693824],[1,-970438681,341383327],[1,452656493,-68334619],[1,209021588,229415889],[1,580338695,-286744639],[1,263639066,-99669610],[1,-586507345,255143085],[2,89294557],[2,209021588],[1,888670782,-378802985],[1,-751520980,8161338],[2,12002448],[1,-967501590,-351688503],[2,514432065],[2,80361112],[1,220830017,-93263524],[2,32131049],[1,-264084048,-155050456],[1,-482193643,-232757642],[2,134352387],[1,-303458351,-974058471],[2,452656493],[1,505909889,-508809796]]";
////        System.out.println(s.replace("[", "{").replace("]", "}"));
//
//    }

    public int[] LRU(int[][] operators, int k) {
        ans = new ArrayList();


        for (int[] operator : operators) {
            String key = String.valueOf(operator[1]);

            switch (operator[0]) {
                case 1:
                    int value = operator[2];
                    if (map.containsKey(key)) {
                        map.remove(key);
                        count--;
                    }
                    if (count == k) {
                        Iterator<String> iterator = map.keySet().iterator();
                        map.remove(iterator.next());//把第一个元素移除
                        count--;
                    }

                    map.put(key, value);
                    count++;
                    break;
                case 2:
                    Integer value2 = map.getOrDefault(String.valueOf(operator[1]), -1);
                    ans.add(value2);
                    if (map.containsKey(key)) {
                        map.remove(key);
                        map.put(key, value2);
                    }
                    break;
                default:
                    break;
            }


            //debug
//            map.forEach((m, v) -> {
//                System.out.print("k:" + m + ",v:" + v);
//                System.out.println();
//            });
//            System.out.println("-----------");
        }
        int[] arr = new int[ans.size()];
        for (int i = 0; i < ans.size(); i++) {
            arr[i] = ans.get(i);
//            System.out.print(arr[i]+" ");
        }
        return arr;
    }
}
